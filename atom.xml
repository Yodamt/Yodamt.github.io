<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yodamt的博客</title>
  
  <subtitle>Yodamt的博客</subtitle>
  <link href="https://yodamt.github.io/atom.xml" rel="self"/>
  
  <link href="https://yodamt.github.io/"/>
  <updated>2023-06-19T03:19:38.199Z</updated>
  <id>https://yodamt.github.io/</id>
  
  <author>
    <name>Yodamt</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode 本地调试模板 c++</title>
    <link href="https://yodamt.github.io/2023/06/19/leetcode%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E6%A8%A1%E6%9D%BFc/"/>
    <id>https://yodamt.github.io/2023/06/19/leetcode%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E6%A8%A1%E6%9D%BFc/</id>
    <published>2023-06-19T02:37:11.000Z</published>
    <updated>2023-06-19T03:19:38.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode刷题本地调试模板（C-）"><a href="#leetcode刷题本地调试模板（C-）" class="headerlink" title="leetcode刷题本地调试模板（C++）"></a>leetcode 刷题本地调试模板（C++）</h1><p>力扣刷题的过程中，测试平台已经封装好了所有的输入和输出，我们只需要编写核心部分的函数即可。这虽然带来了很大的方便，但是也让调试我们的代码成了一件比较尴尬的事情，想要调试一下还要购买会员，这实在是有点让人难以接收。基于此种情况，对于常用的数组、链表和二叉树，自己根据力扣给出的数据结构简单创建了对应的测试模板，只需要将自己的代码复制进去，添加需要的变量或者调用输出函数便可以轻松的构建出一个可以执行的程序，方便用于查看结果和调试自己的程序。 </p><h2 id="数组类"><a href="#数组类" class="headerlink" title="数组类"></a>数组类</h2><h3 id="模板说明"><a href="#模板说明" class="headerlink" title="模板说明"></a>模板说明</h3><p>数组主要涉及包含一维数组和二维数组，一般情况下数组的处理结果为整数，一维数组，二维数组，这里的数组包含字符串，因此只需要提供输入和输出的部分即可，输入部分直接使用 vector 变量存放对应的序列即可，输出部分给出了打印一维和二维数组的函数，可以直接调用。模板代码如下：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintVector</span><span class="params">(vector&lt;<span class="type">int</span>&gt; nums)</span></span>;            <span class="comment">//可以用于调用打印一维整形数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; matrix)</span></span>;  <span class="comment">//可以用于打印二维整形数组</span></span><br><span class="line"><span class="comment">//在这里放入Solution类</span></span><br><span class="line"><span class="comment">//类开始</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//类结束</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="comment">//可以用于存放输入的样例</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums={};</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums1={};</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ansnums={};</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; matrix={ {<span class="number">1</span>,<span class="number">2</span>},</span><br><span class="line">                                 {<span class="number">3</span>,<span class="number">4</span>},</span><br><span class="line">                                 {<span class="number">5</span>,<span class="number">6</span>}, };</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; matrix1={};</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ansmatrix;</span><br><span class="line">    Solution mysolution;                        <span class="comment">//定义一个类的对象</span></span><br><span class="line">    <span class="comment">//根据需求自己编辑输出内容</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//其他函数实现</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintVector</span><span class="params">(vector&lt;<span class="type">int</span>&gt; nums)</span></span>{</span><br><span class="line">    <span class="type">int</span> size=nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++){</span><br><span class="line">        <span class="keyword">if</span>(i) <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">        cout&lt;&lt;nums[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; matrix)</span></span>{</span><br><span class="line">    <span class="type">int</span> row=<span class="number">0</span>,col=<span class="number">0</span>;</span><br><span class="line">    row=matrix.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span>(row) col=matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;row;i++){</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;col;j++){</span><br><span class="line">            <span class="keyword">if</span>(j) <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">            cout&lt;&lt;matrix[i][j];</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="模板演示"><a href="#模板演示" class="headerlink" title="模板演示"></a>模板演示</h3><p>这里使用题目 59. 螺旋矩阵 Ⅱ 进行演示，这里仅仅给出 class 类和 main 函数的部分</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintVector</span><span class="params">(vector&lt;<span class="type">int</span>&gt; nums)</span></span>;            <span class="comment">//可以用于调用打印一维整形数组</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; matrix)</span></span>;  <span class="comment">//可以用于打印二维整形数组</span></span><br><span class="line"><span class="comment">//在这里放入Solution类</span></span><br><span class="line"><span class="comment">//类开始</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//指定四种运动模式，向下为x轴（行数），向右为y轴（列数）建立坐标系</span></span><br><span class="line">    <span class="type">int</span> dx[<span class="number">4</span>]={<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>};</span><br><span class="line">    <span class="type">int</span> dy[<span class="number">4</span>]={<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>};</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">generateMatrix</span>(<span class="type">int</span> n) {</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">ans</span>(n,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n,<span class="number">0</span>));</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; visited=ans;</span><br><span class="line">        <span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>,i=<span class="number">1</span>,MODE=<span class="number">0</span>;                 <span class="comment">//初始化坐标和模式</span></span><br><span class="line">        <span class="type">int</span> num=n*n;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=num){</span><br><span class="line">            ans[x][y]=i++;                      <span class="comment">//填充并标记</span></span><br><span class="line">            visited[x][y]=<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> nextx=x+dx[MODE],nexty=y+dy[MODE];<span class="comment">//计算下一个位置，如果下一个位置到达边界则转向（更换移动模式）</span></span><br><span class="line">            <span class="keyword">if</span>(nextx&lt;<span class="number">0</span>||nextx&gt;=n||nexty&lt;<span class="number">0</span>||nexty&gt;=n||visited[nextx][nexty]==<span class="number">1</span>)</span><br><span class="line">                MODE=(MODE+<span class="number">1</span>)%<span class="number">4</span>;</span><br><span class="line">            x+=dx[MODE],y+=dy[MODE];            <span class="comment">//确定下一个位置的坐标</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="comment">//类结束</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="comment">//可以用于存放输入的样例</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums={};</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; nums1={};</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; ansnums={};</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; matrix={ {<span class="number">1</span>,<span class="number">2</span>},</span><br><span class="line">                                 {<span class="number">3</span>,<span class="number">4</span>},</span><br><span class="line">                                 {<span class="number">5</span>,<span class="number">6</span>}, };</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; matrix1={};</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; ansmatrix;</span><br><span class="line">    Solution mysolution;</span><br><span class="line">    <span class="comment">//根据要求自己编辑输出内容</span></span><br><span class="line">    <span class="built_in">PrintMatrix</span>(mysolution.<span class="built_in">generateMatrix</span>(<span class="number">3</span>));  <span class="comment">//打印构造的螺旋矩阵</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//其他函数的实现此处省略</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h3><p><img src="/2023/06/19/leetcode%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E6%A8%A1%E6%9D%BFc/20210804154157.png" alt="img"></p><h2 id="链表类"><a href="#链表类" class="headerlink" title="链表类"></a>链表类</h2><h3 id="模板说明-1"><a href="#模板说明-1" class="headerlink" title="模板说明"></a>模板说明</h3><p>这里只针对出现比较多的单链表，而且沿用了力扣的不带头结点的形式进行定义和操作。力扣中关于单链表的操作，一般要求返回某个节点数值，返回一个链表。因此，主要的处理为将样例提供的数组按照头插的方式创建单链表，以及获取链表程度，打印链表等基本操作。模板代码如下：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//链表定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> {</span><br><span class="line">   <span class="type">int</span> val;</span><br><span class="line">   ListNode *next;</span><br><span class="line">   <span class="built_in">ListNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">next</span>(<span class="literal">nullptr</span>) {}</span><br><span class="line">   <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>) {}</span><br><span class="line">   <span class="built_in">ListNode</span>(<span class="type">int</span> x, ListNode *next) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(next) {}</span><br><span class="line">};</span><br><span class="line"><span class="comment">//相关函数的声明</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertList</span><span class="params">(ListNode* &amp;head,<span class="type">int</span> x)</span></span>;     <span class="comment">//头插法在链表头部插入节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printList</span><span class="params">(ListNode *head)</span></span>;             <span class="comment">//打印链表</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getLenght</span><span class="params">(ListNode* head)</span></span>;              <span class="comment">//获取链表长度</span></span><br><span class="line"><span class="function">ListNode *<span class="title">creatList</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> n)</span></span>;         <span class="comment">//根据数组创建链表</span></span><br><span class="line"><span class="comment">//在这里放入Solution类</span></span><br><span class="line"><span class="comment">//类开始</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//类结束</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">   ListNode *head=<span class="literal">nullptr</span>;</span><br><span class="line">   <span class="type">int</span> list[]={<span class="number">1</span>,<span class="number">2</span>};</span><br><span class="line">   <span class="type">int</span> len=<span class="built_in">sizeof</span>(list)==<span class="number">0</span>?<span class="number">0</span>:<span class="built_in">sizeof</span>(list)/<span class="built_in">sizeof</span>(list[<span class="number">0</span>]);</span><br><span class="line">   head=<span class="built_in">creatList</span>(list,len);                <span class="comment">//根据数组序列创建链表</span></span><br><span class="line">   Solution ans;</span><br><span class="line">   <span class="comment">//根据要求自己编辑输出内容</span></span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//插入链表,头插,无头结点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertList</span><span class="params">(ListNode* &amp;head,<span class="type">int</span> x)</span></span>{</span><br><span class="line">   ListNode *p=<span class="keyword">new</span> <span class="built_in">ListNode</span>(x);</span><br><span class="line">   <span class="keyword">if</span>(head==<span class="literal">nullptr</span>){</span><br><span class="line">      head=p;</span><br><span class="line">   }</span><br><span class="line">   <span class="keyword">else</span>{</span><br><span class="line">      p-&gt;next=head;</span><br><span class="line">      head=p;</span><br><span class="line">   }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//打印链表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printList</span><span class="params">(ListNode *head)</span></span>{</span><br><span class="line">   <span class="keyword">if</span>(head==<span class="literal">nullptr</span>){            <span class="comment">//空链表输出空</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"NULL\n"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   }</span><br><span class="line">    <span class="keyword">while</span>(head){</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,head-&gt;val);</span><br><span class="line">        head=head-&gt;next;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//获取链表长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getLenght</span><span class="params">(ListNode* head)</span></span>{</span><br><span class="line">   <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span>(head){</span><br><span class="line">      len++;</span><br><span class="line">      head=head-&gt;next;</span><br><span class="line">   }</span><br><span class="line">   <span class="keyword">return</span> len;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//根据一个数组序列，使用头插创建链表，需要知道元素个数</span></span><br><span class="line"><span class="function">ListNode *<span class="title">creatList</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> n)</span></span>{</span><br><span class="line">   ListNode *head=<span class="literal">nullptr</span>;</span><br><span class="line">   <span class="keyword">if</span>(n&gt;<span class="number">0</span>) <span class="built_in">reverse</span>(a,a+n);                   <span class="comment">//头插方法创建的链表是给定序列的逆序，这里提前逆置一下</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++){                     <span class="comment">//得到给定序列顺序的链表</span></span><br><span class="line">      <span class="built_in">insertList</span>(head,a[i]);</span><br><span class="line">   }</span><br><span class="line">   <span class="keyword">return</span> head;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="模板演示-1"><a href="#模板演示-1" class="headerlink" title="模板演示"></a>模板演示</h3><p>这里使用题目 19. 删除链表的倒数第 N 个结点进行演示，这里仅仅给出 class 类和 main 函数的部分：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//链表定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> {</span><br><span class="line">   <span class="type">int</span> val;</span><br><span class="line">   ListNode *next;</span><br><span class="line">   <span class="built_in">ListNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">next</span>(<span class="literal">nullptr</span>) {}</span><br><span class="line">   <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>) {}</span><br><span class="line">   <span class="built_in">ListNode</span>(<span class="type">int</span> x, ListNode *next) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(next) {}</span><br><span class="line">};</span><br><span class="line"><span class="comment">//相关函数的声明</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertList</span><span class="params">(ListNode* &amp;head,<span class="type">int</span> x)</span></span>;     <span class="comment">//头插法在链表头部插入节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printList</span><span class="params">(ListNode *head)</span></span>;             <span class="comment">//打印链表</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getLenght</span><span class="params">(ListNode* head)</span></span>;              <span class="comment">//获取链表长度</span></span><br><span class="line"><span class="function">ListNode *<span class="title">creatList</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> n)</span></span>;         <span class="comment">//根据数组创建链表</span></span><br><span class="line"><span class="comment">//在这里放入Solution类</span></span><br><span class="line"><span class="comment">//类开始</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="type">int</span> n)</span> </span>{</span><br><span class="line">        ListNode* newHead=<span class="keyword">new</span> ListNode,*pre,*tail;<span class="comment">//创建头结点</span></span><br><span class="line">        pre=tail=newHead;                       <span class="comment">//tail提前步进n步</span></span><br><span class="line">        newHead-&gt;next=head;</span><br><span class="line">        <span class="keyword">while</span>(n--) tail=tail-&gt;next;             <span class="comment">//tail提前走n步</span></span><br><span class="line">        <span class="keyword">while</span>(tail-&gt;next){                      <span class="comment">//同时走，当tail到最后一个结点时，per刚好时倒数第n个的前一个结点</span></span><br><span class="line">            pre=pre-&gt;next;</span><br><span class="line">            tail=tail-&gt;next;</span><br><span class="line">        }</span><br><span class="line">        pre-&gt;next=pre-&gt;next-&gt;next;              <span class="comment">//删除结点</span></span><br><span class="line">        <span class="keyword">return</span> newHead-&gt;next;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="comment">//类结束</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">   ListNode *head=<span class="literal">nullptr</span>;</span><br><span class="line">   <span class="type">int</span> list[]={<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>};</span><br><span class="line">   <span class="type">int</span> len=<span class="built_in">sizeof</span>(list)==<span class="number">0</span>?<span class="number">0</span>:<span class="built_in">sizeof</span>(list)/<span class="built_in">sizeof</span>(list[<span class="number">0</span>]);</span><br><span class="line">   head=<span class="built_in">creatList</span>(list,len);</span><br><span class="line">   Solution ans;</span><br><span class="line">   <span class="built_in">printList</span>(ans.<span class="built_in">removeNthFromEnd</span>(head,<span class="number">2</span>));</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//其他函数的实现此处省略</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="效果图：-1"><a href="#效果图：-1" class="headerlink" title="效果图："></a>效果图：</h3><p><img src="/2023/06/19/leetcode%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E6%A8%A1%E6%9D%BFc/20210804155058.png" alt="img"></p><h3 id="模板说明-2"><a href="#模板说明-2" class="headerlink" title="模板说明"></a>模板说明</h3><p>相比于数组和链表类，二叉树则更麻烦一些，因为二叉树的链式结构在调试过程中很难直观看出树形结构。常见的示例输入，一般都是二叉树的层序遍历序列，我们也无法直接用于函数的调试，想要自己构建二叉树，每次如果都要手动处理则比较麻烦；对于输出而言，常见的结果一般是要求返回数字，数值，或者是一棵处理过的二叉树。对于返回为二叉树的情况，我们能够通过样例测试很容易知道正确与否，但是当出现错误时，我们无法直接知晓中间过程出了什么问题。因此，我编写了将层序序列转化为一个二叉树的方法和可视化输出二叉树树形结构的方法，以供调试时使用样例进行输入，输出时可以使用打印二叉树查看树形结构。 　</p><p>特别说明：由于受到边界条件和输入形式的限制，力扣中给出的序列中空节点使用了 null 表示，我在程序中使用 INT_MAX 做了替换，也就是说如果你在填写测试时使用了 INT_MAX，则可能出现不可预料的错误，这一点需要注意（一般数值范围的边界条件都能很好的处理，所以我默认不会使用到 INT_MAX 这样的数值作为自己测试的一部分）。其次，由于显示效果的限制，我将二叉树节点中的数字输出限定了 3 个字符宽度（同理也使用了 3 个空格填充了那些没有数字的位置），也就意味着更长的数字可能导致二叉树的结构看起来略微有些不太整齐，再使用时可以根据自己的情况进行调整，我在相应的地方写上了详细的注释。 　代码模板如下：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> null INT_MAX                        <span class="comment">//把力扣给定的null节点定义为int的最大值，用于识别空结点</span></span></span><br><span class="line"><span class="comment">//二叉树的结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> {</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) {}</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) {}</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x, TreeNode *left, TreeNode *right) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(left), <span class="built_in">right</span>(right) {}</span><br><span class="line">};</span><br><span class="line"><span class="function">TreeNode *<span class="title">CreatTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;layerorder)</span></span>;       <span class="comment">//根据给定的层序序列建树的函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LayerOfTree</span><span class="params">(TreeNode *root)</span></span>;                    <span class="comment">//计算树的层数，用于绘制树形</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintTreeMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;matrix)</span></span>;  <span class="comment">//用于打印树形结构专用的二维数组输出函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintTree</span><span class="params">(TreeNode *root)</span></span>;                     <span class="comment">//打印树的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; matrix)</span></span>;      <span class="comment">//打印一般二维数组的函数</span></span><br><span class="line"><span class="comment">//在这里放入Solution类</span></span><br><span class="line"><span class="comment">//类开始</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//类结束</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="comment">//树的各种序列</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; layerorder={<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>};</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; preoder={<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">7</span>};</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; inorder={<span class="number">9</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">7</span>};</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; postorder={};</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; matrix;</span><br><span class="line">    <span class="comment">//建树并打印树，可以使用建树来为自己的函数提供输入</span></span><br><span class="line">    TreeNode *root=<span class="built_in">CreatTree</span>(layerorder);</span><br><span class="line">    Solution mysolution;</span><br><span class="line">    <span class="comment">//---此处调用你的方法---//</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">//可以打印树，查看其树形结构</span></span><br><span class="line">    <span class="built_in">PrintTree</span>(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function">TreeNode *<span class="title">CreatTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;layerorder)</span></span>{   <span class="comment">//根据层序序列建树</span></span><br><span class="line">    <span class="type">int</span> n=layerorder.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;                    <span class="comment">//计算序列元素个数，如果空树返回空指针</span></span><br><span class="line">    queue&lt;TreeNode*&gt; q;</span><br><span class="line">    TreeNode *root=<span class="keyword">new</span> <span class="built_in">TreeNode</span>(layerorder[<span class="number">0</span>]); <span class="comment">//创建根结点并入队</span></span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=(n<span class="number">-1</span>)/<span class="number">2</span>;i++){                <span class="comment">//只需处理第一个结点到最后一个非叶子结点</span></span><br><span class="line">        <span class="keyword">if</span>(layerorder[i]==null) <span class="keyword">continue</span>;       <span class="comment">//如果是空结点则跳过</span></span><br><span class="line">        TreeNode* now=q.<span class="built_in">front</span>();                <span class="comment">//从队列中取出当前结点</span></span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> left=<span class="number">2</span>*i+<span class="number">1</span>,right=<span class="number">2</span>*(i+<span class="number">1</span>);           <span class="comment">//计算当前结点的左右孩子的位置</span></span><br><span class="line">        <span class="keyword">if</span>(left&lt;n&amp;&amp;layerorder[left]!=null){     <span class="comment">//如果左孩子存在且不为空时创建左孩子结点并入队</span></span><br><span class="line">            now-&gt;left=<span class="keyword">new</span> <span class="built_in">TreeNode</span>(layerorder[left]);</span><br><span class="line">            q.<span class="built_in">push</span>(now-&gt;left);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(right&lt;n&amp;&amp;layerorder[right]!=null){   <span class="comment">//如果右孩子存在且不为空时创建右孩子结点并入队</span></span><br><span class="line">            now-&gt;right=<span class="keyword">new</span> <span class="built_in">TreeNode</span>(layerorder[right]);</span><br><span class="line">            q.<span class="built_in">push</span>(now-&gt;right);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> root;                                <span class="comment">//返回创建好的树</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LayerOfTree</span><span class="params">(TreeNode *root)</span></span>{                <span class="comment">//层序遍历获取树高</span></span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> layer=<span class="number">0</span>;</span><br><span class="line">    queue&lt;TreeNode*&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()){</span><br><span class="line">        layer++;</span><br><span class="line">        <span class="type">int</span> size=q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++){</span><br><span class="line">            TreeNode* now=q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(now-&gt;left) q.<span class="built_in">push</span>(now-&gt;left);</span><br><span class="line">            <span class="keyword">if</span>(now-&gt;right) q.<span class="built_in">push</span>(now-&gt;right);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> layer;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintTreeMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;matrix)</span></span>{  <span class="comment">//打印填充了树形结构的二维数组</span></span><br><span class="line">    <span class="type">int</span> row=<span class="number">0</span>,col=<span class="number">0</span>;</span><br><span class="line">    row=matrix.<span class="built_in">size</span>();</span><br><span class="line">    string flag=<span class="built_in">string</span>(<span class="number">3</span>,<span class="string">' '</span>);                      <span class="comment">//空白位置使用3个空格占用</span></span><br><span class="line">    <span class="keyword">if</span>(row) col=matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;row;i++){</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;col;j++){</span><br><span class="line">            <span class="keyword">if</span>(j) <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">            <span class="keyword">if</span>(matrix[i][j]==null) cout&lt;&lt;flag;      <span class="comment">//如果是空节点则打印空字符</span></span><br><span class="line">            <span class="keyword">else</span>  <span class="built_in">printf</span>(<span class="string">"%3d"</span>,matrix[i][j]);       <span class="comment">//否则输出三个字符宽度的数字</span></span><br><span class="line">        }</span><br><span class="line">        cout&lt;&lt;<span class="built_in">string</span>(<span class="number">2</span>,<span class="string">'\n'</span>);                       <span class="comment">//增大行距以避免树形看起来太扁</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintTree</span><span class="params">(TreeNode *root)</span></span>{                     <span class="comment">//根据树形填充一个二维数组</span></span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">nullptr</span>){                              <span class="comment">//如果是空树则只输出NULL</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"NULL"</span>);<span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span>{                                    <span class="comment">//每一个节点对应二维数组中的一个坐标</span></span><br><span class="line">        <span class="type">int</span> x,y;</span><br><span class="line">        <span class="built_in">node</span>(){}</span><br><span class="line">        <span class="built_in">node</span>(<span class="type">int</span> x_,<span class="type">int</span> y_):<span class="built_in">x</span>(x_),<span class="built_in">y</span>(y_){}</span><br><span class="line">    };</span><br><span class="line">    unordered_map&lt;TreeNode*,node&gt; mp;               <span class="comment">//节点指针和二维数组坐标的对应关系</span></span><br><span class="line">    <span class="type">int</span> layer=<span class="built_in">LayerOfTree</span>(root);                    <span class="comment">//获取树高</span></span><br><span class="line">    <span class="type">int</span> rol=(<span class="number">1</span>&lt;&lt;layer)<span class="number">-1</span>;                           <span class="comment">//按照满二叉树的最后一行数量计算（每个元素中间用空格分开,共为奇数个空位）</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">matrix</span>(layer,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(rol,null));    <span class="comment">//用于填充的二维数组，用INT_MAX初始化</span></span><br><span class="line">    <span class="type">int</span> offset=<span class="number">1</span>&lt;&lt;(layer<span class="number">-2</span>);                        <span class="comment">//偏移量，根的孩子与根节点的坐标偏移量为1&lt;&lt;(layer-2)</span></span><br><span class="line">    queue&lt;TreeNode*&gt; q;                             <span class="comment">//以层序遍历的方式填充</span></span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,j=rol/<span class="number">2</span>;                                <span class="comment">//根节点所在的坐标为第一行的中间</span></span><br><span class="line">    mp[root]=<span class="built_in">node</span>(i,j);                             <span class="comment">//填充并记录坐标</span></span><br><span class="line">    matrix[i][j]=root-&gt;val;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()){                              <span class="comment">//层序遍历</span></span><br><span class="line">        <span class="type">int</span> size=q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;size;k++){</span><br><span class="line">            TreeNode *now=q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            i=mp[now].x, j=mp[now].y;               <span class="comment">//获取队头元素的坐标</span></span><br><span class="line">            <span class="keyword">if</span>(now-&gt;left){                          <span class="comment">//如果左孩子存在，则左孩子入队并填充</span></span><br><span class="line">                q.<span class="built_in">push</span>(now-&gt;left);</span><br><span class="line">                <span class="type">int</span> tempi=i+<span class="number">1</span>,tempj=j-offset;       <span class="comment">//左孩子位于下一行，并且向左偏移</span></span><br><span class="line">                matrix[tempi][tempj]=now-&gt;left-&gt;val;</span><br><span class="line">                mp[now-&gt;left]=<span class="built_in">node</span>(tempi,tempj);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(now-&gt;right){                         <span class="comment">//右孩子同理</span></span><br><span class="line">                q.<span class="built_in">push</span>(now-&gt;right);</span><br><span class="line">                <span class="type">int</span> tempi=i+<span class="number">1</span>,tempj=j+offset;       <span class="comment">//右孩子位于下一行，并且向右偏移</span></span><br><span class="line">                matrix[tempi][tempj]=now-&gt;right-&gt;val;</span><br><span class="line">                mp[now-&gt;right]=<span class="built_in">node</span>(tempi,tempj);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        offset&gt;&gt;=<span class="number">1</span>;                                 <span class="comment">//偏移量每次减半</span></span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">PrintTreeMatrix</span>(matrix);                        <span class="comment">//打印最后的结果</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; matrix)</span></span>{      <span class="comment">//用于打印二维数组的函数</span></span><br><span class="line">    <span class="type">int</span> row=<span class="number">0</span>,col=<span class="number">0</span>;</span><br><span class="line">    row=matrix.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span>(row) col=matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;row;i++){</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;col;j++){</span><br><span class="line">            <span class="keyword">if</span>(j) <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">            cout&lt;&lt;matrix[i][j];</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="模板演示-2"><a href="#模板演示-2" class="headerlink" title="模板演示"></a>模板演示</h3><p>这里使用题目 226. 翻转二叉树进行演示，这里仅仅给出 class 类和 main 函数的部分：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> null INT_MAX                        <span class="comment">//把力扣给定的null节点定义为int的最大值，用于识别空结点</span></span></span><br><span class="line"><span class="comment">//二叉树的结构体定义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TreeNode</span> {</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    TreeNode *left;</span><br><span class="line">    TreeNode *right;</span><br><span class="line">    <span class="built_in">TreeNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) {}</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) {}</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="type">int</span> x, TreeNode *left, TreeNode *right) : <span class="built_in">val</span>(x), <span class="built_in">left</span>(left), <span class="built_in">right</span>(right) {}</span><br><span class="line">};</span><br><span class="line"><span class="function">TreeNode *<span class="title">CreatTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;layerorder)</span></span>;       <span class="comment">//根据给定的层序序列建树的函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LayerOfTree</span><span class="params">(TreeNode *root)</span></span>;                    <span class="comment">//计算树的层数，用于绘制树形</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintTreeMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; &amp;matrix)</span></span>;  <span class="comment">//用于打印树形结构专用的二维数组输出函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintTree</span><span class="params">(TreeNode *root)</span></span>;                     <span class="comment">//打印树的函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; matrix)</span></span>;       <span class="comment">//打印一般二维数组的函数</span></span><br><span class="line"><span class="comment">//在这里放入Solution类</span></span><br><span class="line"><span class="comment">//类开始</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">invertTree</span><span class="params">(TreeNode* root)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>||(root-&gt;left==<span class="literal">nullptr</span>&amp;&amp;root-&gt;right==<span class="literal">nullptr</span>)) <span class="keyword">return</span> root; <span class="comment">//递归边界，如果为空树或者到了叶子节点</span></span><br><span class="line">        <span class="built_in">swap</span>(root-&gt;left,root-&gt;right);       <span class="comment">//交换左右子树</span></span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;left);             <span class="comment">//递归处理左右子树</span></span><br><span class="line">        <span class="built_in">invertTree</span>(root-&gt;right);</span><br><span class="line">        <span class="keyword">return</span> root;                        <span class="comment">//返回最后处理过的树</span></span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="comment">//类结束</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="comment">//树的各种序列</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; layerorder={<span class="number">4</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>};</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; preoder={};</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; inorder={};</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; postorder={};</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; matrix;</span><br><span class="line">    <span class="comment">//建树并打印树，可以使用建树来为自己的函数提供输入</span></span><br><span class="line">    TreeNode *root=<span class="built_in">CreatTree</span>(layerorder);</span><br><span class="line">    Solution mysolution;</span><br><span class="line">    <span class="comment">//---此处调用你的方法---//</span></span><br><span class="line">    root=mysolution.<span class="built_in">invertTree</span>(root);</span><br><span class="line">    <span class="built_in">PrintTree</span>(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//其他函数的实现此处省略</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图:"></a>效果图:</h3><p><img src="/2023/06/19/leetcode%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E6%A8%A1%E6%9D%BFc/20210804161352.png" alt="img"></p><p>出处：<a href="https://blog.songjiahao.com/archives/362">SAquarius の梦想屋</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcode刷题本地调试模板（C-）&quot;&gt;&lt;a href=&quot;#leetcode刷题本地调试模板（C-）&quot; class=&quot;headerlink&quot; title=&quot;leetcode刷题本地调试模板（C++）&quot;&gt;&lt;/a&gt;leetcode 刷题本地调试模板（C++）&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>leetcode 刷题中的小技巧</title>
    <link href="https://yodamt.github.io/2023/06/19/leetcode%E5%88%B7%E9%A2%98%E4%B8%AD%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://yodamt.github.io/2023/06/19/leetcode%E5%88%B7%E9%A2%98%E4%B8%AD%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</id>
    <published>2023-06-19T02:18:15.000Z</published>
    <updated>2023-06-19T02:21:39.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode刷题中的一些小技巧"><a href="#leetcode刷题中的一些小技巧" class="headerlink" title="leetcode刷题中的一些小技巧"></a>leetcode 刷题中的一些小技巧</h1><h2 id="一些小技巧"><a href="#一些小技巧" class="headerlink" title="一些小技巧"></a>一些小技巧</h2><p>1. 整型数据的上下限可以写成 INT_MAX 和 INT_MIN</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;INT_MIN;<span class="comment">//可以输出最小整型数据。</span></span><br></pre></td></tr></tbody></table></figure><p>2. 利用 memset 可以实现 0 或 false 初始化</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));<span class="comment">//这里的dp可以是二维数组</span></span><br></pre></td></tr></tbody></table></figure><p>3. 二维 vector 的初始化</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));<span class="comment">//方法1</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;<span class="comment">//方法2</span></span><br><span class="line">dp = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; (m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span> <span class="params">(m, <span class="number">0</span>)</span></span>;<span class="comment">//一维情况</span></span><br></pre></td></tr></tbody></table></figure><p>4.map 的使用<br>unordered_map（哈希表）和 map 类似，都是存储的 key-value 的值，可以通过 key 快速索引到 value。不同的是 unordered_map 不会根据 key 的大小进行排序，存储时是根据 key 的 hash 值判断元素是否相同，即 unordered_map 内部元素是无序的，而 map 中的元素是按照二叉搜索树存储，进行中序遍历会得到有序遍历。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">unordered_map&lt;string, <span class="type">int</span>&gt;  dict; <span class="comment">// 声明unordered_map对象</span></span><br><span class="line">    <span class="comment">// 插入数据的三种方式</span></span><br><span class="line">dict.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string,<span class="type">int</span>&gt;(<span class="string">"apple"</span>,<span class="number">2</span>));</span><br><span class="line">dict.<span class="built_in">insert</span>(unordered_map&lt;string, <span class="type">int</span>&gt;::<span class="built_in">value_type</span>(<span class="string">"orange"</span>,<span class="number">3</span>));</span><br><span class="line">dict[<span class="string">"banana"</span>] = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否有元素</span></span><br><span class="line"><span class="keyword">if</span>(dict.<span class="built_in">empty</span>())</span><br><span class="line">cout&lt;&lt;<span class="string">"该字典无元素"</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">"该字典共有"</span>&lt;&lt;dict.<span class="built_in">size</span>()&lt;&lt;<span class="string">"个元素"</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line">unordered_map&lt;string, <span class="type">int</span>&gt;::iterator iter;</span><br><span class="line"><span class="keyword">for</span>(iter=dict.<span class="built_in">begin</span>();iter!=dict.<span class="built_in">end</span>();iter++)</span><br><span class="line">cout&lt;&lt;iter-&gt;first&lt;&lt;ends&lt;&lt;iter-&gt;second&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找</span></span><br><span class="line"><span class="comment">//用count函数来判定关键字是否出现，其缺点是无法定位数据出现位置,由于map的特性，一对一的映射关系，就决定了count函数的返回值只有两个，要么是0，要么是1，出现的情况，当然是返回1了</span></span><br><span class="line"><span class="comment">//用find函数来定位数据出现位置，它返回的一个迭代器，当数据出现时，它返回数据所在位置的迭代器，如果map中没有要查找的数据，它返回的迭代器等于end函数返回的迭代器。</span></span><br><span class="line"><span class="keyword">if</span>(dict.<span class="built_in">count</span>(<span class="string">"boluo"</span>)==<span class="number">0</span>)</span><br><span class="line">cout&lt;&lt;<span class="string">"can't find boluo!"</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">"find boluo!"</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((iter=dict.<span class="built_in">find</span>(<span class="string">"banana"</span>))!=dict.<span class="built_in">end</span>())</span><br><span class="line">cout&lt;&lt;<span class="string">"banana="</span>&lt;&lt;iter-&gt;second&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">"can't find boluo!"</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcode刷题中的一些小技巧&quot;&gt;&lt;a href=&quot;#leetcode刷题中的一些小技巧&quot; class=&quot;headerlink&quot; title=&quot;leetcode刷题中的一些小技巧&quot;&gt;&lt;/a&gt;leetcode 刷题中的一些小技巧&lt;/h1&gt;&lt;h2 id=&quot;一些小技</summary>
      
    
    
    
    
    <category term="leetcode" scheme="https://yodamt.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>vector&lt;bool&gt; 踩坑</title>
    <link href="https://yodamt.github.io/2023/06/14/vector-bool-%E8%B8%A9%E5%9D%91/"/>
    <id>https://yodamt.github.io/2023/06/14/vector-bool-%E8%B8%A9%E5%9D%91/</id>
    <published>2023-06-14T06:25:09.000Z</published>
    <updated>2023-06-19T02:22:42.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-vector＜bool＞-的巨坑与range-based-for"><a href="#C-vector＜bool＞-的巨坑与range-based-for" class="headerlink" title="C++ vector＜bool＞ 的巨坑与range_based_for"></a>C++ vector＜bool＞ 的巨坑与 range_based_for</h1><p>最近写代码的时候写了下面这样的代码：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ::std::vector;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">v</span>(<span class="number">10</span>, vector\&lt;<span class="type">bool</span>&gt;(<span class="number">10</span>, <span class="literal">false</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; vx : v)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; velem : vx)</span><br><span class="line">{</span><br><span class="line">velem = <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这段看似平常的代码居然会编译错误，但是如果把 bool 换成 int，那么编译就会非常正确：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ::std::vector;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">v</span>(<span class="number">10</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; vx : v)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; velem : vx)</span><br><span class="line">{</span><br><span class="line">velem = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​搜索 <a href="http://www.cplusplus.com/reference/vector/vector-bool/">C++ reference</a>，在里面我们可以看到 vector&lt;bool&gt; 原来是 vector 模板类的一个偏特化，而并不是由 vector 直接实例化得到的。C++ reference 给我们的解释是，为了便于把 bool 优化成比特存储，而不需要一个字节来存储。为了探寻 range_based_for 失败的原因，我们查阅 C++ 标准 2 中 vector&lt;bool&gt; 的定义（略去了不必要的代码）：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> std {</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Allocator</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">vector</span>&lt;<span class="type">bool</span>, Allocator&gt; {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// types:</span></span><br><span class="line"><span class="keyword">using</span> value_type = <span class="type">bool</span>;</span><br><span class="line"><span class="keyword">using</span> size_type = implementation-defined; <span class="comment">// see 26.2</span></span><br><span class="line"><span class="keyword">using</span> iterator = implementation-defined; <span class="comment">// see 26.2</span></span><br><span class="line"><span class="keyword">using</span> const_iterator = implementation-defined; <span class="comment">// see 26.2</span></span><br><span class="line"><span class="comment">// bit reference:</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">reference</span> {</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">vector</span>;</span><br><span class="line">reference&amp; <span class="keyword">operator</span>=(<span class="type">const</span> <span class="type">bool</span> x) <span class="keyword">noexcept</span>;</span><br><span class="line"><span class="comment">/*some code*/</span></span><br><span class="line">};</span><br><span class="line"><span class="function">iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="function">iterator <span class="title">end</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="comment">// element access:</span></span><br><span class="line">reference <span class="keyword">operator</span>[](size_type n) ;</span><br><span class="line"><span class="function">reference <span class="title">at</span><span class="params">(size_type n)</span> </span>;</span><br><span class="line"><span class="function">reference <span class="title">front</span><span class="params">()</span></span>;</span><br><span class="line">};</span><br><span class="line"><span class="comment">/*some code*/</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>结果非常的 amazing 啊！我们对 vector&lt;bool&gt; 的每个元素进行访问的时候，实际上访问的都是 vector&lt;bool&gt;::reference 这个类，而不是其成员本身。毕竟如果编译器想要将其每个元素优化成二进制位的话，C++ 语言由于不存在直接访问二进制位的操作，就无法直接访问其每个元素，所以统一为访问这个类来对每个元素进行引用。了解了这些，我们想解答编译出错的事情，还需要知道 range_based_for 的实现。C++ 标准 2 中如此规定 range_based_for：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">for</span>-range-declaration : <span class="keyword">for</span>-range-initializer ) statement</span><br><span class="line"><span class="comment">/*is equivalent to*/</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">auto</span> &amp;&amp;__range = <span class="keyword">for</span>-range-initializer;</span><br><span class="line"><span class="keyword">auto</span> __begin = begin-expr;</span><br><span class="line"><span class="keyword">auto</span> __end = end-expr;</span><br><span class="line"><span class="keyword">for</span> (; __begin != __end; ++__begin) {</span><br><span class="line"><span class="keyword">for</span>-range-declaration = *__begin;</span><br><span class="line">statement</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>那么，我们对一维情况 vector&lt;bool&gt; v; for (auto&amp; velem : v) {} 进行等价展开，它就等价于：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">bool</span>&gt; v;</span><br><span class="line">{</span><br><span class="line"><span class="keyword">auto</span> &amp;&amp;__range = v;<span class="comment">//auto被推导为vector\&lt;bool&gt;&amp;，因此__range为auto&amp;&amp;&amp;，即auto&amp;</span></span><br><span class="line"><span class="keyword">auto</span> __begin = __range.<span class="built_in">begin</span>();<span class="comment">//auto被推导为vector\&lt;bool&gt;::ierator</span></span><br><span class="line"><span class="keyword">auto</span> __end = __range.<span class="built_in">end</span>();<span class="comment">//同上</span></span><br><span class="line"><span class="keyword">for</span> (; __begin != __end; ++__begin) {</span><br><span class="line"><span class="keyword">auto</span>&amp; velem = __begin.<span class="keyword">operator</span>*();<span class="comment">//error! velem被推导为vector\&lt;bool&gt;::reference&amp;</span></span><br><span class="line">statement</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>显然标记了 //error! 的那一行就产生了错误！因为__begin.operator*() 是一个函数调用，而函数的返回值是一个右值，即 vector&lt;bool&gt;::reference 的临时对象，而我们却给它赋值给了左值引用 vector&lt;bool&gt;::reference&amp;，因此会报出编译错误。</p><p>那么，我们如果要修改 v 的元素该怎么办呢？这是一个令人发指的操作：注意到我们的 vector&lt;bool&gt;::reference 是对 vector&lt;bool &gt; 的一个元素的引用（可以理解为指针），那么我们只需要值传递 vector&lt;bool&gt;::reference 即可，不需要进行引用传递！即代码如下：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">::<span class="function">std::vector&lt;<span class="type">bool</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> velem : v)</span><br><span class="line">{</span><br><span class="line">velem = <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line">::std::cout &lt;&lt; (<span class="type">int</span>)v[<span class="number">5</span>] &lt;&lt; ::std::endl;</span><br></pre></td></tr></tbody></table></figure><p>输出的结果果然是 1！这个操作与其他类型的 vector 完全不同。因为我们知道，把 vector&lt;bool&gt; 换成 vector<int> 的话：</int></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">::<span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> velem : v)</span><br><span class="line">{</span><br><span class="line">velem = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">::std::cout &lt;&lt; (<span class="type">int</span>)v[<span class="number">5</span>] &lt;&lt; ::std::endl;</span><br></pre></td></tr></tbody></table></figure><p>它的输出结果显然仍然是 0，因为值传递不 1 能改变 v 内元素的值，而 vector&lt;bool&gt; 与我们的习惯完全不同！这是需要特别注意的。</p><p>我们回到最开始的问题，我起初报错的代码就可以改成：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ::std::vector;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">v</span>(<span class="number">10</span>, vector\&lt;<span class="type">bool</span>&gt;(<span class="number">10</span>, <span class="literal">false</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; vx : v)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> velem : vx)<span class="comment">//此处为auto，并非auto&amp;！</span></span><br><span class="line">{</span><br><span class="line">velem = <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这就是 vector&lt;bool&gt; 与普通的 vector 的不同之处。<br>因此，C++ reference 中也警告我们，我们无法使用无特化的 bool 类型。如果这种特化的 bool 类型不能满足我们的需求，我们只能用 char、unsigned char 或其他的封装类型来代替，或者使用其他的容器如 deque 来代替。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-vector＜bool＞-的巨坑与range-based-for&quot;&gt;&lt;a href=&quot;#C-vector＜bool＞-的巨坑与range-based-for&quot; class=&quot;headerlink&quot; title=&quot;C++ vector＜bool＞ 的巨坑与ran</summary>
      
    
    
    
    
    <category term="C++" scheme="https://yodamt.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="https://yodamt.github.io/2023/06/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://yodamt.github.io/2023/06/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2023-06-14T02:11:29.000Z</published>
    <updated>2023-06-14T03:04:38.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>leetcode 官方的题解在特殊 case 超时（大量重复值，时间复杂度退化到 n^2)</p><p><img src="/2023/06/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/image-20230614105542970.png" alt="image-20230614105542970"></p><p><a href="https://leetcode.cn/problems/sort-an-array/solutions/178305/pai-xu-shu-zu-by-leetcode-solution/">912. 排序数组 - 力扣（Leetcode）</a></p><p>所以需要一点小小的三路随机震撼</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>{</span><br><span class="line">        <span class="built_in">quicksort</span>(nums,<span class="number">0</span>,nums.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    }</span><br><span class="line">   <span class="comment">//三路快排：分为小于，等于，大于三部分</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">quicksort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;arr, <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> randidx = low + <span class="built_in">rand</span>() % (high - low + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">swap</span>(arr[low], arr[randidx]);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> pivot = arr[low];</span><br><span class="line">        <span class="type">int</span> lt = low, gt = high+<span class="number">1</span>, i = low + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; gt) {</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt; pivot) {</span><br><span class="line">                <span class="built_in">swap</span>(arr[lt+<span class="number">1</span>], arr[i]);</span><br><span class="line">                lt++;</span><br><span class="line">                i++;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] &gt; pivot) {</span><br><span class="line">                <span class="built_in">swap</span>(arr[i], arr[gt<span class="number">-1</span>]);</span><br><span class="line">                gt--;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                i++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">swap</span>(arr[low], arr[lt]);</span><br><span class="line">        <span class="built_in">quicksort</span>(arr, low, lt - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">quicksort</span>(arr, gt, high);</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h1&gt;&lt;h2 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h</summary>
      
    
    
    
    
    <category term="排序" scheme="https://yodamt.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yodamt.github.io/2023/06/14/hello-world/"/>
    <id>https://yodamt.github.io/2023/06/14/hello-world/</id>
    <published>2023-06-14T02:00:17.915Z</published>
    <updated>2023-06-14T02:00:17.915Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
