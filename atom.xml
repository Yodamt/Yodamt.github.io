<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yodamt的博客</title>
  
  <subtitle>Yodamt的博客</subtitle>
  <link href="https://yodamt.github.io/atom.xml" rel="self"/>
  
  <link href="https://yodamt.github.io/"/>
  <updated>2023-06-19T02:21:39.227Z</updated>
  <id>https://yodamt.github.io/</id>
  
  <author>
    <name>Yodamt</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode 刷题中的小技巧</title>
    <link href="https://yodamt.github.io/2023/06/19/leetcode%E5%88%B7%E9%A2%98%E4%B8%AD%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://yodamt.github.io/2023/06/19/leetcode%E5%88%B7%E9%A2%98%E4%B8%AD%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</id>
    <published>2023-06-19T02:18:15.000Z</published>
    <updated>2023-06-19T02:21:39.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode刷题中的一些小技巧"><a href="#leetcode刷题中的一些小技巧" class="headerlink" title="leetcode刷题中的一些小技巧"></a>leetcode 刷题中的一些小技巧</h1><h2 id="一些小技巧"><a href="#一些小技巧" class="headerlink" title="一些小技巧"></a>一些小技巧</h2><p>1. 整型数据的上下限可以写成 INT_MAX 和 INT_MIN</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;INT_MIN;<span class="comment">//可以输出最小整型数据。</span></span><br></pre></td></tr></tbody></table></figure><p>2. 利用 memset 可以实现 0 或 false 初始化</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in">sizeof</span>(dp));<span class="comment">//这里的dp可以是二维数组</span></span><br></pre></td></tr></tbody></table></figure><p>3. 二维 vector 的初始化</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));<span class="comment">//方法1</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dp;<span class="comment">//方法2</span></span><br><span class="line">dp = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; (m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span> <span class="params">(m, <span class="number">0</span>)</span></span>;<span class="comment">//一维情况</span></span><br></pre></td></tr></tbody></table></figure><p>4.map 的使用<br>unordered_map（哈希表）和 map 类似，都是存储的 key-value 的值，可以通过 key 快速索引到 value。不同的是 unordered_map 不会根据 key 的大小进行排序，存储时是根据 key 的 hash 值判断元素是否相同，即 unordered_map 内部元素是无序的，而 map 中的元素是按照二叉搜索树存储，进行中序遍历会得到有序遍历。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">unordered_map&lt;string, <span class="type">int</span>&gt;  dict; <span class="comment">// 声明unordered_map对象</span></span><br><span class="line">    <span class="comment">// 插入数据的三种方式</span></span><br><span class="line">dict.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string,<span class="type">int</span>&gt;(<span class="string">"apple"</span>,<span class="number">2</span>));</span><br><span class="line">dict.<span class="built_in">insert</span>(unordered_map&lt;string, <span class="type">int</span>&gt;::<span class="built_in">value_type</span>(<span class="string">"orange"</span>,<span class="number">3</span>));</span><br><span class="line">dict[<span class="string">"banana"</span>] = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否有元素</span></span><br><span class="line"><span class="keyword">if</span>(dict.<span class="built_in">empty</span>())</span><br><span class="line">cout&lt;&lt;<span class="string">"该字典无元素"</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">"该字典共有"</span>&lt;&lt;dict.<span class="built_in">size</span>()&lt;&lt;<span class="string">"个元素"</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line">unordered_map&lt;string, <span class="type">int</span>&gt;::iterator iter;</span><br><span class="line"><span class="keyword">for</span>(iter=dict.<span class="built_in">begin</span>();iter!=dict.<span class="built_in">end</span>();iter++)</span><br><span class="line">cout&lt;&lt;iter-&gt;first&lt;&lt;ends&lt;&lt;iter-&gt;second&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找</span></span><br><span class="line"><span class="comment">//用count函数来判定关键字是否出现，其缺点是无法定位数据出现位置,由于map的特性，一对一的映射关系，就决定了count函数的返回值只有两个，要么是0，要么是1，出现的情况，当然是返回1了</span></span><br><span class="line"><span class="comment">//用find函数来定位数据出现位置，它返回的一个迭代器，当数据出现时，它返回数据所在位置的迭代器，如果map中没有要查找的数据，它返回的迭代器等于end函数返回的迭代器。</span></span><br><span class="line"><span class="keyword">if</span>(dict.<span class="built_in">count</span>(<span class="string">"boluo"</span>)==<span class="number">0</span>)</span><br><span class="line">cout&lt;&lt;<span class="string">"can't find boluo!"</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">"find boluo!"</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((iter=dict.<span class="built_in">find</span>(<span class="string">"banana"</span>))!=dict.<span class="built_in">end</span>())</span><br><span class="line">cout&lt;&lt;<span class="string">"banana="</span>&lt;&lt;iter-&gt;second&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout&lt;&lt;<span class="string">"can't find boluo!"</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;leetcode刷题中的一些小技巧&quot;&gt;&lt;a href=&quot;#leetcode刷题中的一些小技巧&quot; class=&quot;headerlink&quot; title=&quot;leetcode刷题中的一些小技巧&quot;&gt;&lt;/a&gt;leetcode 刷题中的一些小技巧&lt;/h1&gt;&lt;h2 id=&quot;一些小技</summary>
      
    
    
    
    
    <category term="leetcode" scheme="https://yodamt.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>vector&lt;bool&gt; 踩坑</title>
    <link href="https://yodamt.github.io/2023/06/14/vector-bool-%E8%B8%A9%E5%9D%91/"/>
    <id>https://yodamt.github.io/2023/06/14/vector-bool-%E8%B8%A9%E5%9D%91/</id>
    <published>2023-06-14T06:25:09.000Z</published>
    <updated>2023-06-19T02:22:42.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-vector＜bool＞-的巨坑与range-based-for"><a href="#C-vector＜bool＞-的巨坑与range-based-for" class="headerlink" title="C++ vector＜bool＞ 的巨坑与range_based_for"></a>C++ vector＜bool＞ 的巨坑与 range_based_for</h1><p>最近写代码的时候写了下面这样的代码：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ::std::vector;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">v</span>(<span class="number">10</span>, vector\&lt;<span class="type">bool</span>&gt;(<span class="number">10</span>, <span class="literal">false</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; vx : v)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; velem : vx)</span><br><span class="line">{</span><br><span class="line">velem = <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这段看似平常的代码居然会编译错误，但是如果把 bool 换成 int，那么编译就会非常正确：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ::std::vector;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">v</span>(<span class="number">10</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; vx : v)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; velem : vx)</span><br><span class="line">{</span><br><span class="line">velem = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​搜索 <a href="http://www.cplusplus.com/reference/vector/vector-bool/">C++ reference</a>，在里面我们可以看到 vector&lt;bool&gt; 原来是 vector 模板类的一个偏特化，而并不是由 vector 直接实例化得到的。C++ reference 给我们的解释是，为了便于把 bool 优化成比特存储，而不需要一个字节来存储。为了探寻 range_based_for 失败的原因，我们查阅 C++ 标准 2 中 vector&lt;bool&gt; 的定义（略去了不必要的代码）：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> std {</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Allocator</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">vector</span>&lt;<span class="type">bool</span>, Allocator&gt; {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// types:</span></span><br><span class="line"><span class="keyword">using</span> value_type = <span class="type">bool</span>;</span><br><span class="line"><span class="keyword">using</span> size_type = implementation-defined; <span class="comment">// see 26.2</span></span><br><span class="line"><span class="keyword">using</span> iterator = implementation-defined; <span class="comment">// see 26.2</span></span><br><span class="line"><span class="keyword">using</span> const_iterator = implementation-defined; <span class="comment">// see 26.2</span></span><br><span class="line"><span class="comment">// bit reference:</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">reference</span> {</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">vector</span>;</span><br><span class="line">reference&amp; <span class="keyword">operator</span>=(<span class="type">const</span> <span class="type">bool</span> x) <span class="keyword">noexcept</span>;</span><br><span class="line"><span class="comment">/*some code*/</span></span><br><span class="line">};</span><br><span class="line"><span class="function">iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="function">iterator <span class="title">end</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="comment">// element access:</span></span><br><span class="line">reference <span class="keyword">operator</span>[](size_type n) ;</span><br><span class="line"><span class="function">reference <span class="title">at</span><span class="params">(size_type n)</span> </span>;</span><br><span class="line"><span class="function">reference <span class="title">front</span><span class="params">()</span></span>;</span><br><span class="line">};</span><br><span class="line"><span class="comment">/*some code*/</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>结果非常的 amazing 啊！我们对 vector&lt;bool&gt; 的每个元素进行访问的时候，实际上访问的都是 vector&lt;bool&gt;::reference 这个类，而不是其成员本身。毕竟如果编译器想要将其每个元素优化成二进制位的话，C++ 语言由于不存在直接访问二进制位的操作，就无法直接访问其每个元素，所以统一为访问这个类来对每个元素进行引用。了解了这些，我们想解答编译出错的事情，还需要知道 range_based_for 的实现。C++ 标准 2 中如此规定 range_based_for：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">for</span>-range-declaration : <span class="keyword">for</span>-range-initializer ) statement</span><br><span class="line"><span class="comment">/*is equivalent to*/</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">auto</span> &amp;&amp;__range = <span class="keyword">for</span>-range-initializer;</span><br><span class="line"><span class="keyword">auto</span> __begin = begin-expr;</span><br><span class="line"><span class="keyword">auto</span> __end = end-expr;</span><br><span class="line"><span class="keyword">for</span> (; __begin != __end; ++__begin) {</span><br><span class="line"><span class="keyword">for</span>-range-declaration = *__begin;</span><br><span class="line">statement</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>那么，我们对一维情况 vector&lt;bool&gt; v; for (auto&amp; velem : v) {} 进行等价展开，它就等价于：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">bool</span>&gt; v;</span><br><span class="line">{</span><br><span class="line"><span class="keyword">auto</span> &amp;&amp;__range = v;<span class="comment">//auto被推导为vector\&lt;bool&gt;&amp;，因此__range为auto&amp;&amp;&amp;，即auto&amp;</span></span><br><span class="line"><span class="keyword">auto</span> __begin = __range.<span class="built_in">begin</span>();<span class="comment">//auto被推导为vector\&lt;bool&gt;::ierator</span></span><br><span class="line"><span class="keyword">auto</span> __end = __range.<span class="built_in">end</span>();<span class="comment">//同上</span></span><br><span class="line"><span class="keyword">for</span> (; __begin != __end; ++__begin) {</span><br><span class="line"><span class="keyword">auto</span>&amp; velem = __begin.<span class="keyword">operator</span>*();<span class="comment">//error! velem被推导为vector\&lt;bool&gt;::reference&amp;</span></span><br><span class="line">statement</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>显然标记了 //error! 的那一行就产生了错误！因为__begin.operator*() 是一个函数调用，而函数的返回值是一个右值，即 vector&lt;bool&gt;::reference 的临时对象，而我们却给它赋值给了左值引用 vector&lt;bool&gt;::reference&amp;，因此会报出编译错误。</p><p>那么，我们如果要修改 v 的元素该怎么办呢？这是一个令人发指的操作：注意到我们的 vector&lt;bool&gt;::reference 是对 vector&lt;bool &gt; 的一个元素的引用（可以理解为指针），那么我们只需要值传递 vector&lt;bool&gt;::reference 即可，不需要进行引用传递！即代码如下：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">::<span class="function">std::vector&lt;<span class="type">bool</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> velem : v)</span><br><span class="line">{</span><br><span class="line">velem = <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line">::std::cout &lt;&lt; (<span class="type">int</span>)v[<span class="number">5</span>] &lt;&lt; ::std::endl;</span><br></pre></td></tr></tbody></table></figure><p>输出的结果果然是 1！这个操作与其他类型的 vector 完全不同。因为我们知道，把 vector&lt;bool&gt; 换成 vector<int> 的话：</int></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">::<span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> velem : v)</span><br><span class="line">{</span><br><span class="line">velem = <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">::std::cout &lt;&lt; (<span class="type">int</span>)v[<span class="number">5</span>] &lt;&lt; ::std::endl;</span><br></pre></td></tr></tbody></table></figure><p>它的输出结果显然仍然是 0，因为值传递不 1 能改变 v 内元素的值，而 vector&lt;bool&gt; 与我们的习惯完全不同！这是需要特别注意的。</p><p>我们回到最开始的问题，我起初报错的代码就可以改成：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> ::std::vector;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">v</span>(<span class="number">10</span>, vector\&lt;<span class="type">bool</span>&gt;(<span class="number">10</span>, <span class="literal">false</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; vx : v)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> velem : vx)<span class="comment">//此处为auto，并非auto&amp;！</span></span><br><span class="line">{</span><br><span class="line">velem = <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这就是 vector&lt;bool&gt; 与普通的 vector 的不同之处。<br>因此，C++ reference 中也警告我们，我们无法使用无特化的 bool 类型。如果这种特化的 bool 类型不能满足我们的需求，我们只能用 char、unsigned char 或其他的封装类型来代替，或者使用其他的容器如 deque 来代替。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-vector＜bool＞-的巨坑与range-based-for&quot;&gt;&lt;a href=&quot;#C-vector＜bool＞-的巨坑与range-based-for&quot; class=&quot;headerlink&quot; title=&quot;C++ vector＜bool＞ 的巨坑与ran</summary>
      
    
    
    
    
    <category term="C++" scheme="https://yodamt.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="https://yodamt.github.io/2023/06/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://yodamt.github.io/2023/06/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2023-06-14T02:11:29.000Z</published>
    <updated>2023-06-14T03:04:38.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>leetcode 官方的题解在特殊 case 超时（大量重复值，时间复杂度退化到 n^2)</p><p><img src="/2023/06/14/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/image-20230614105542970.png" alt="image-20230614105542970"></p><p><a href="https://leetcode.cn/problems/sort-an-array/solutions/178305/pai-xu-shu-zu-by-leetcode-solution/">912. 排序数组 - 力扣（Leetcode）</a></p><p>所以需要一点小小的三路随机震撼</p><figure class="highlight cpp"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortArray</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>{</span><br><span class="line">        <span class="built_in">quicksort</span>(nums,<span class="number">0</span>,nums.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    }</span><br><span class="line">   <span class="comment">//三路快排：分为小于，等于，大于三部分</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">quicksort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;arr, <span class="type">int</span> low, <span class="type">int</span> high)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> randidx = low + <span class="built_in">rand</span>() % (high - low + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">swap</span>(arr[low], arr[randidx]);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> pivot = arr[low];</span><br><span class="line">        <span class="type">int</span> lt = low, gt = high+<span class="number">1</span>, i = low + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; gt) {</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt; pivot) {</span><br><span class="line">                <span class="built_in">swap</span>(arr[lt+<span class="number">1</span>], arr[i]);</span><br><span class="line">                lt++;</span><br><span class="line">                i++;</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] &gt; pivot) {</span><br><span class="line">                <span class="built_in">swap</span>(arr[i], arr[gt<span class="number">-1</span>]);</span><br><span class="line">                gt--;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                i++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">swap</span>(arr[low], arr[lt]);</span><br><span class="line">        <span class="built_in">quicksort</span>(arr, low, lt - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">quicksort</span>(arr, gt, high);</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h1&gt;&lt;h2 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h</summary>
      
    
    
    
    
    <category term="排序" scheme="https://yodamt.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yodamt.github.io/2023/06/14/hello-world/"/>
    <id>https://yodamt.github.io/2023/06/14/hello-world/</id>
    <published>2023-06-14T02:00:17.915Z</published>
    <updated>2023-06-14T02:00:17.915Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
